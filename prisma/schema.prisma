generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum FileCategory {
  USER
  COURSE
  DOCUMENT
  QUIZ
}

enum FileType {
  IMAGE
  PDF
  VIDEO
}

enum RoleType {
  ADMIN
  TEACHER
  STUDENT
  CENTER_ADMIN
  PARENT
}

enum AcademicStage {
  FIRST_SECONDARY
  SECOND_SECONDARY
  THIRD_SECONDARY
}

enum Gender {
  MALE
  FEMALE
}

enum EnrollmentStatus {
  ACTIVE
  EXPIRED
  REFUNDED
  PENDING
}

enum PaymentStatus {
  INITIATED
  PAID
  FAILED
  EXPIRED
  REFUNDED
}

enum PaymentProvider {
  FAWRY
  WALLET
  CASH
  MANUAL // new for manuall type
  CARD
}

enum ContentType {
  VIDEO
  PDF
  IMAGE
  TEXT
  QUIZ
}

enum QuestionType {
  MCQ_TEXT
  MCQ_IMAGE
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

// Models
model File {
  id           String       @id @default(uuid())
  category     FileCategory
  type         FileType
  userId       String?
  courseId     String?
  originalName String
  storedName   String?
  path         String
  mimeType     String
  size         Int
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())

  quizId String?
  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String           @id @default(cuid())
  tokenHash String
  userId    String
  type      VerificationType
  expiresAt DateTime
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("verification_tokens")
}

model User {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  firstName           String
  middleName          String?
  lastName            String
  phone               String               @unique
  parentPhone         String
  email               String?              @unique
  gender              Gender?
  location            String?
  academicStage       AcademicStage
  passwordHash        String
  telegramId          String?
  telegramUsername    String?
  telegramAuthDate    DateTime?
  isActive            Boolean              @default(false)
  emailVerified       Boolean              @default(false)
  phoneVerified       Boolean              @default(false)
  avatar              String?
  lastLogin           DateTime?
  themePreference     String               @default("light")
  userRoles           UserRole[]
  userCenters         UserCenter[]
  enrollments         Enrollment[]
  lessonEnrollments   LessonEnrollment[] // Keep here for parallelism with enrollments
  loginEvents         LoginEvent[]
  wallet              Wallet?
  quizSubmissions     QuizSubmission[]
  homeworkSubmissions HomeworkSubmission[]
  activityEvents      ActivityEvent[]
  payments            Payment[]
  forumTopics         ForumTopic[]
  forumPosts          ForumPost[]
  forumVotes          ForumVote[]
  verificationTokens  VerificationToken[]
  files               File[]

  sessionVersion Int @default(0)

  // Bi-directional relations for coupons
  validCoupons    Coupon[] @relation("ValidCoupons")
  excludedCoupons Coupon[] @relation("ExcludedCoupons")
  createdCoupons  Coupon[] @relation("CreatedCoupons")

  // ✅ relation to CouponUsage
  couponUsages CouponUsage[]

  contentProgress ContentProgress[]

  @@map("users")
}

model RefreshToken {
  id     String @id @default(cuid())
  token  String @unique
  userId String

  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Role {
  id    String     @id @default(cuid())
  name  RoleType
  users UserRole[]

  @@unique([name])
  @@map("roles")
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model LoginEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String
  userAgent String
  os        String?
  device    String?
  city      String?
  country   String?
  success   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("login_events")
}

model Center {
  id          String       @id @default(cuid())
  name        String
  city        String
  address     String?
  phone       String?
  email       String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  codes       CenterCode[]
  userCenters UserCenter[]
  courses     Course[]
  lessons     Lesson[] // Added for center-specific lessons

  @@map("centers")
}

model CenterCode {
  id          String       @id @default(cuid())
  code        String       @unique
  centerId    String
  center      Center       @relation(fields: [centerId], references: [id], onDelete: Cascade)
  active      Boolean      @default(true)
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  enrollments Enrollment[]

  @@map("center_codes")
}

model UserCenter {
  userId   String
  centerId String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  center   Center   @relation(fields: [centerId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  @@id([userId, centerId])
  @@map("user_centers")
}

model Course {
  id            String        @id @default(cuid())
  title         String
  academicYear  AcademicStage
  description   String?
  thumbnail     String?
  price         Float
  discountPrice Float?
  isPublished   Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  centerId      String?
  center        Center?       @relation(fields: [centerId], references: [id])
  lessons       Lesson[]
  enrollments   Enrollment[]
  coupons       Coupon[]
  files         File[]
  quizzes       Quiz[] // Added for course-level quizzes
  homeworks     Homework[] // Added for course-level homeworks

  @@map("courses")
}

model Lesson {
  id                String             @id @default(cuid())
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title             String
  description       String?
  order             Int
  isPublished       Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  centerId          String? // Added for center-specific lessons
  center            Center?            @relation(fields: [centerId], references: [id])
  contents          Content[]
  quizzes           Quiz[]
  homeworks         Homework[]
  lessonProgress    LessonProgress[]
  price             Float? // Price for individual lesson purchase (null/0 = not purchasable alone)
  discountPrice     Float? // Discounted price for lesson
  lessonEnrollments LessonEnrollment[] // Added for per-lesson purchases
  coupons           Coupon[] // Added for lesson-specific coupons

  requiresQuizPass Boolean @default(false)
  // passThreshold    Float   @default(50.0) // Percentage required to pass

  contentProgress ContentProgress[]

  @@map("lessons")
}

model Content {
  id             String      @id @default(cuid())
  lessonId       String
  lesson         Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  title          String
  type           ContentType
  contentUrl     String?
  duration       Int?
  isPublished    Boolean     @default(false)
  order          Int
  isFree         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  bunnyVideoGuid String?

  // ✅ One-to-one relation to Quiz
  quizId   String? @unique
  quiz     Quiz?   @relation(fields: [quizId], references: [id])

  contentProgress ContentProgress[]

  @@map("contents")
}


model ContentProgress {
  id           String    @id @default(cuid())
  userId       String
  contentId    String
  enrollmentId String? // For course enrollment tracking
  lessonId     String? // Convenience if you need lesson scope
  completed    Boolean   @default(false)
  completedAt  DateTime?
  lastAccessed DateTime  @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  content    Content     @relation(fields: [contentId], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson     Lesson?     @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId], name: "unique_user_content_progress")
  @@map("content_progress")
}

model Enrollment {
  id                 String              @id @default(cuid())
  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  status             EnrollmentStatus
  startedAt          DateTime            @default(now())
  expiresAt          DateTime?
  completedAt        DateTime?
  progress           Float               @default(0)
  couponId           String?
  coupon             Coupon?             @relation(fields: [couponId], references: [id])
  centerCodeId       String?
  centerCode         CenterCode?         @relation(fields: [centerCodeId], references: [id])
  amountPaid         Float
  paymentId          String?
  payment            Payment?            @relation(fields: [paymentId], references: [id])
  walletTransactions WalletTransaction[]
  lessonProgress     LessonProgress[]
  updatedAt          DateTime?           @updatedAt

  lessonEnrollments LessonEnrollment[]

  contentProgress ContentProgress[]

  @@map("enrollments")
}

model LessonEnrollment {
  id             String           @id @default(cuid())
  userId         String
  lessonId       String
  enrollmentId   String? // Optional link to course enrollment
  status         EnrollmentStatus @default(PENDING)
  startedAt      DateTime         @default(now())
  expiresAt      DateTime?
  amountPaid     Float            @default(0)
  paymentId      String?
  payment        Payment?         @relation(fields: [paymentId], references: [id], onDelete: SetNull)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson         Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment     Enrollment?      @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)
  lessonProgress LessonProgress[] // Added to track progress for lesson purchases

  @@unique([userId, lessonId])
  @@map("lesson_enrollments")
}

model LessonProgress {
  id                 String            @id @default(cuid())
  enrollmentId       String?
  lessonEnrollmentId String? // Added for per-lesson purchase progress
  lessonId           String
  enrollment         Enrollment?       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lessonEnrollment   LessonEnrollment? @relation(fields: [lessonEnrollmentId], references: [id], onDelete: Cascade)
  lesson             Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed          Boolean           @default(false)
  progress           Float             @default(0)
  lastAccessed       DateTime          @default(now())
  completedAt        DateTime?

  @@unique([enrollmentId, lessonId, lessonEnrollmentId], name: "unique_progress")
  @@map("lesson_progress")
}

model Quiz {
  id          String           @id @default(cuid())
  lessonId    String?
  lesson      Lesson?          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  courseId    String?
  course      Course?          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  timeLimit   Int?
  maxAttempts Int              @default(1)
  isPublished Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  order       Int?             @default(999)
  isFree      Boolean          @default(false)

  questions   Question[]
  submissions QuizSubmission[]
  score       Float?
  files       File[]

  // ✅ Match relation name here
  content Content? 

  passingScore  Float  @default(50)
  passThreshold Float? @default(40.0)

  @@map("quizzes")
}

model Question {
  id          String       @id @default(cuid())
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  type        QuestionType
  text        String?
  imageUrl    String?
  explanation String?
  order       Int
  points      Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  choices     Choice[]
  quizAnswers QuizAnswer[]

  modelAnswer String?

  @@index([quizId, order])
  @@map("questions")
}

model Choice {
  id          String       @id @default(cuid())
  questionId  String
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text        String?
  isCorrect   Boolean      @default(false)
  quizAnswers QuizAnswer[]
  imageUrl    String?

  @@map("choices")
}

model QuizSubmission {
  id          String       @id @default(cuid())
  quizId      String
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  timeSpent   Int?
  score       Float?
  totalPoints Float
  answers     QuizAnswer[]
  passed      Boolean? @default(false)     // NEW: Tracks if user passed the quiz

  @@index([quizId, userId]) // Fast user quiz history
  @@index([completedAt])
  @@map("quiz_submissions")
}

model QuizAnswer {
  id               String         @id @default(cuid())
  submissionId     String
  submission       QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId       String
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedChoiceId String?
  selectedChoice   Choice?         @relation(fields: [selectedChoiceId], references: [id], onDelete: Cascade)
  textAnswer       String?        // Add this field for essay answers
  isCorrect        Boolean?
  awardedPoints    Int?           // Add this field to match your code

  @@map("quiz_answers")
}

model Homework {
  id          String               @id @default(cuid())
  lessonId    String?
  lesson      Lesson?              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  courseId    String? // Added for course-level homeworks
  course      Course?              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  dueDate     DateTime?
  maxPoints   Float
  isPublished Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  submissions HomeworkSubmission[]

  @@map("homeworks")
}

model HomeworkSubmission {
  id          String    @id @default(cuid())
  homeworkId  String
  homework    Homework  @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission  String
  submittedAt DateTime  @default(now())
  grade       Float?
  feedback    String?
  gradedAt    DateTime?

  @@map("homework_submissions")
}

model Payment {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Float
  currency          String              @default("EGP")
  provider          PaymentProvider
  providerRef       String?
  status            PaymentStatus
  description       String?
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  enrollments       Enrollment[]
  lessonEnrollments LessonEnrollment[] // Added for lesson purchases
  walletTxns        WalletTransaction[]
  paymentLogs       PaymentLog[]

  @@map("payments")
}

model PaymentLog {
  id        String   @id @default(cuid())
  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  event     String
  payload   Json
  signature String?
  createdAt DateTime @default(now())

  @@map("payment_logs")
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      Float               @default(0)
  currency     String              @default("EGP")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id           String      @id @default(cuid())
  walletId     String
  wallet       Wallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  amount       Float
  type         String
  description  String?
  paymentId    String?
  payment      Payment?    @relation(fields: [paymentId], references: [id])
  enrollmentId String?
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  createdAt    DateTime    @default(now())

  @@map("wallet_transactions")
}

model ActivityEvent {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String
  contentId  String?
  contentUrl String?
  duration   Int?
  progress   Float?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@map("activity_events")
}

model ForumCategory {
  id          String       @id @default(cuid())
  name        String
  description String?
  order       Int
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  topics      ForumTopic[]

  @@map("forum_categories")
}

model ForumTopic {
  id         String        @id @default(cuid())
  categoryId String
  category   ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String
  content    String
  isPinned   Boolean       @default(false)
  isLocked   Boolean       @default(false)
  viewCount  Int           @default(0)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  posts      ForumPost[]

  @@map("forum_topics")
}

model ForumPost {
  id        String      @id @default(cuid())
  topicId   String
  topic     ForumTopic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  isEdited  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  votes     ForumVote[]

  @@map("forum_posts")
}

model ForumVote {
  id     String    @id @default(cuid())
  postId String
  post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  value  Int

  @@unique([postId, userId])
  @@map("forum_votes")
}

model Upload {
  id        Int      @id @default(autoincrement())
  guid      String   @unique
  uploadUrl String
  lessonId  String?
  userId    Int?
  fileName  String?
  fileSize  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add these enums
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CouponScope {
  GLOBAL
  COURSE
  LESSON
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  USED_UP
}

// Update the Coupon model
model Coupon {
  id             String       @id @default(cuid())
  code           String       @unique
  name           String? // Human-readable name
  description    String?
  discountType   DiscountType
  discountValue  Float
  maxUses        Int? // Maximum total uses
  maxUsesPerUser Int? // Maximum uses per user
  usedCount      Int          @default(0)
  minPurchase    Float? // Minimum purchase amount required
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean      @default(true)
  scope          CouponScope  @default(GLOBAL)
  status         CouponStatus @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relation: who created the coupon (must be an Admin user)
  createdById String
  createdBy   User   @relation("CreatedCoupons", fields: [createdById], references: [id])

  // Relations to course/lesson
  courseId    String?
  course      Course?      @relation(fields: [courseId], references: [id])
  lessonId    String?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  enrollments Enrollment[]

  // Valid/excluded users
  validForUsers User[] @relation("ValidCoupons")
  excludedUsers User[] @relation("ExcludedCoupons")

  // ✅ NEW: relation to CouponUsage
  usages CouponUsage[]

  @@index([code])
  @@index([status])
  @@index([startDate, endDate])
  @@index([createdById]) // useful for "all coupons created by admin X"
  @@map("coupons")
}

model CouponUsage {
  id        String   @id @default(cuid())
  userId    String
  couponId  String // <-- foreign key field
  count     Int      @default(0)
  updatedAt DateTime @updatedAt

  // Relations
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Each user can only have one usage record per coupon
  @@unique([couponId, userId], name: "coupon_user_unique")
  @@map("coupon_usages")
}

enum CouponUsageStatus {
  PENDING
  COMPLETED
  FAILED
}
